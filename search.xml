<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客系统的登录页面详解</title>
    <url>/2025/09/01/Token%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="登录页面表单-详细标签和变量解释"><a class="header-anchor" href="#登录页面表单-详细标签和变量解释">¶</a>登录页面表单 - 详细标签和变量解释</h2>
<h3 id="1-登录页面容器-Login-Page-Container"><a class="header-anchor" href="#1-登录页面容器-Login-Page-Container">¶</a>1. <strong>登录页面容器 (Login Page Container)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login-page&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none; flex-direction: column; align-items: center; justify-content: center; min-height: 100vh; text-align: center; background: transparent; position: fixed; width: 100%; z-index: 9999;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - HTML分区元素，用于创建登录页面的容器</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>id=&quot;login-page&quot;</code> - 唯一标识符，用于JavaScript获取和操作此元素</li>
<li><code>style=&quot;...&quot;</code> - 内联CSS样式</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>display: none</code> - 初始状态隐藏，只有JavaScript控制显示时才可见</li>
<li><code>flex-direction: column</code> - Flexbox布局，垂直排列子元素</li>
<li><code>align-items: center</code> - 水平居中对齐子元素</li>
<li><code>justify-content: center</code> - 垂直居中对齐子元素</li>
<li><code>min-height: 100vh</code> - 最小高度为视口高度的100%，确保全屏显示</li>
<li><code>text-align: center</code> - 文本居中对齐</li>
<li><code>background: transparent</code> - 背景透明</li>
<li><code>position: fixed</code> - 固定定位，相对于浏览器窗口</li>
<li><code>width: 100%</code> - 宽度占满整个窗口</li>
<li><code>z-index: 9999</code> - 层级很高，确保在最上层显示</li>
</ul>
<h3 id="2-磨砂玻璃背景层-Frosted-Glass-Background"><a class="header-anchor" href="#2-磨砂玻璃背景层-Frosted-Glass-Background">¶</a>2. <strong>磨砂玻璃背景层 (Frosted Glass Background)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;frosted-bg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: rgba(255, 255, 255, 0.7); backdrop-filter: blur(15px); -webkit-backdrop-filter: blur(15px); z-index: -1;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 创建磨砂玻璃效果的背景层</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>id=&quot;frosted-bg&quot;</code> - 磨砂背景的唯一标识符</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>position: absolute</code> - 绝对定位，相对于最近的定位祖先元素</li>
<li><code>top: 0; left: 0; right: 0; bottom: 0</code> - 四个方向都设为0，铺满整个父容器</li>
<li><code>background: rgba(255, 255, 255, 0.7)</code> - 半透明白色背景，透明度为0.7</li>
<li><code>backdrop-filter: blur(15px)</code> - 背景模糊效果，15px的模糊半径</li>
<li><code>-webkit-backdrop-filter: blur(15px)</code> - Webkit浏览器的前缀版本</li>
<li><code>z-index: -1</code> - 负层级，确保在内容层之下</li>
</ul>
<h3 id="3-漂浮小球容器-Bubbles-Container"><a class="header-anchor" href="#3-漂浮小球容器-Bubbles-Container">¶</a>3. <strong>漂浮小球容器 (Bubbles Container)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bubbles-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; top: 0; left: 0; right: 0; bottom: 0; overflow: hidden; z-index: -2;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 创建漂浮小球的容器</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>id=&quot;bubbles-container&quot;</code> - 小球容器的唯一标识符</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>position: absolute</code> - 绝对定位</li>
<li><code>top: 0; left: 0; right: 0; bottom: 0</code> - 铺满整个父容器</li>
<li><code>overflow: hidden</code> - 隐藏超出容器的内容</li>
<li><code>z-index: -2</code> - 比磨砂背景更低的层级</li>
</ul>
<h3 id="4-登录表单主体-Login-Form-Main"><a class="header-anchor" href="#4-登录表单主体-Login-Form-Main">¶</a>4. <strong>登录表单主体 (Login Form Main)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 400px; padding: 2.5rem; background: rgba(255, 255, 255, 0.97); border-radius: 16px; box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25); backdrop-filter: blur(15px); transition: all 0.8s cubic-bezier(0.25, 0.8, 0.25, 1);&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 登录表单的主要容器</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>max-width: 400px</code> - 最大宽度400px，确保在移动设备上的可用性</li>
<li><code>padding: 2.5rem</code> - 内边距2.5rem，提供舒适的内部空间</li>
<li><code>background: rgba(255, 255, 255, 0.97)</code> - 几乎不透明的白色背景</li>
<li><code>border-radius: 16px</code> - 圆角边框，16px的圆角半径</li>
<li><code>box-shadow: 0 15px 40px rgba(0, 0, 0, 0.25)</code> - 阴影效果，向下偏移15px，模糊40px，25%透明度</li>
<li><code>backdrop-filter: blur(15px)</code> - 背景模糊效果</li>
<li><code>transition: all 0.8s cubic-bezier(0.25, 0.8, 0.25, 1)</code> - 所有属性的过渡动画，0.8秒，使用贝塞尔曲线缓动函数</li>
</ul>
<h3 id="5-锁形图标-Lock-Icon"><a class="header-anchor" href="#5-锁形图标-Lock-Icon">¶</a>5. <strong>锁形图标 (Lock Icon)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;64&quot;</span> <span class="attr">height</span>=<span class="string">&quot;64&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;var(--current-theme-color, #8CC8FF)&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: block; margin: 0 auto;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main-lock-icon&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;3&quot;</span> <span class="attr">y</span>=<span class="string">&quot;11&quot;</span> <span class="attr">width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;11&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M7 11V7a5 5 0 0 1 10 0v4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;svg&gt;</code> - 可缩放矢量图形元素</li>
<li><code>&lt;rect&gt;</code> - 矩形元素，表示锁的主体</li>
<li><code>&lt;path&gt;</code> - 路径元素，表示锁的顶部弧形</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>width=&quot;64&quot; height=&quot;64&quot;</code> - SVG画布尺寸64x64像素</li>
<li><code>viewBox=&quot;0 0 24 24&quot;</code> - 视口框，定义SVG的坐标系统</li>
<li><code>fill=&quot;none&quot;</code> - 不填充颜色</li>
<li><code>stroke=&quot;var(--current-theme-color, #8CC8FF)&quot;</code> - 描边颜色，使用CSS变量，默认值为#8CC8FF</li>
<li><code>stroke-width=&quot;2&quot;</code> - 描边宽度2像素</li>
<li><code>stroke-linecap=&quot;round&quot;</code> - 线条末端为圆形</li>
<li><code>stroke-linejoin=&quot;round&quot;</code> - 线条连接处为圆形</li>
<li><code>id=&quot;main-lock-icon&quot;</code> - 主锁图标的唯一标识符</li>
</ul>
<p><strong>子元素详解</strong>：</p>
<ul>
<li><code>&lt;rect x=&quot;3&quot; y=&quot;11&quot; width=&quot;18&quot; height=&quot;11&quot; rx=&quot;2&quot; ry=&quot;2&quot;&gt;</code> - 锁的主体矩形，位置(3,11)，尺寸18x11，圆角2x2</li>
<li><code>&lt;path d=&quot;M7 11V7a5 5 0 0 1 10 0v4&quot;&gt;</code> - 锁的顶部弧形路径，从(7,11)开始，向上到(7,7)，然后画一个5x5的椭圆，最后向下到(7,4)</li>
</ul>
<h3 id="6-标题-Title"><a class="header-anchor" href="#6-标题-Title">¶</a>6. <strong>标题 (Title)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 2rem; color: var(--current-theme-color, #8CC8FF); font-size: 1.75rem; font-weight: 600;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main-title&quot;</span>&gt;</span>zhyBlogs<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;h2&gt;</code> - 二级标题元素</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>id=&quot;main-title&quot;</code> - 主标题的唯一标识符</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>margin-bottom: 2rem</code> - 下边距2rem</li>
<li><code>color: var(--current-theme-color, #8CC8FF)</code> - 文字颜色，使用CSS变量</li>
<li><code>font-size: 1.75rem</code> - 字体大小1.75rem</li>
<li><code>font-weight: 600</code> - 字体粗细600（半粗体）</li>
</ul>
<p><strong>内容</strong>：</p>
<ul>
<li><code>zhyBlogs</code> - 博客名称</li>
</ul>
<h3 id="7-密码输入区域-Password-Input-Area"><a class="header-anchor" href="#7-密码输入区域-Password-Input-Area">¶</a>7. <strong>密码输入区域 (Password Input Area)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 1.5rem; position: relative; width: 100%;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: var(--current-theme-color, #8CC8FF);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;18&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;3&quot;</span> <span class="attr">y</span>=<span class="string">&quot;11&quot;</span> <span class="attr">width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;11&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M7 11V7a5 5 0 0 1 10 0v4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pass-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; padding: 0.85rem 2.5rem; margin-bottom: 0; border: 2px solid transparent; border-radius: 8px; font-size: 16px; transition: all 0.3s ease; background: #f8f9fa; box-sizing: border-box;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>外层容器</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 密码输入区域的容器</li>
<li><code>margin-bottom: 1.5rem</code> - 下边距1.5rem</li>
<li><code>position: relative</code> - 相对定位，为绝对定位的子元素提供参考</li>
<li><code>width: 100%</code> - 宽度占满父容器</li>
</ul>
<p><strong>密码图标容器</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 密码图标的容器</li>
<li><code>id=&quot;password-icon&quot;</code> - 密码图标的唯一标识符</li>
<li><code>position: absolute</code> - 绝对定位</li>
<li><code>left: 12px</code> - 距离左边12px</li>
<li><code>top: 50%</code> - 距离顶部50%</li>
<li><code>transform: translateY(-50%)</code> - 向上偏移自身高度的50%，实现垂直居中</li>
<li><code>color: var(--current-theme-color, #8CC8FF)</code> - 图标颜色</li>
</ul>
<p><strong>密码图标SVG</strong>：</p>
<ul>
<li><code>&lt;svg width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;</code> - 18x18像素的锁图标</li>
<li><code>&lt;rect x=&quot;3&quot; y=&quot;11&quot; width=&quot;18&quot; height=&quot;11&quot; rx=&quot;2&quot; ry=&quot;2&quot;&gt;</code> - 锁的主体</li>
<li><code>&lt;path d=&quot;M7 11V7a5 5 0 0 1 10 0v4&quot;&gt;</code> - 锁的顶部弧形</li>
</ul>
<p><strong>密码输入框</strong>：</p>
<ul>
<li><code>&lt;input&gt;</code> - 输入框元素</li>
<li><code>type=&quot;password&quot;</code> - 密码类型，输入时显示为点</li>
<li><code>id=&quot;pass-input&quot;</code> - 密码输入框的唯一标识符</li>
<li><code>placeholder=&quot;请输入密码&quot;</code> - 占位符文本</li>
<li><code>class=&quot;login-input&quot;</code> - CSS类名</li>
<li><code>style=&quot;...&quot;</code> - 内联样式</li>
</ul>
<p><strong>输入框样式详解</strong>：</p>
<ul>
<li><code>width: 100%</code> - 宽度占满父容器</li>
<li><code>padding: 0.85rem 2.5rem</code> - 内边距，上下0.85rem，左右2.5rem</li>
<li><code>margin-bottom: 0</code> - 下边距为0</li>
<li><code>border: 2px solid transparent</code> - 2px透明边框</li>
<li><code>border-radius: 8px</code> - 8px圆角</li>
<li><code>font-size: 16px</code> - 字体大小16px</li>
<li><code>transition: all 0.3s ease</code> - 所有属性0.3秒缓动过渡</li>
<li><code>background: #f8f9fa</code> - 浅灰色背景</li>
<li><code>box-sizing: border-box</code> - 盒模型，边框和内边距包含在宽度内</li>
</ul>
<h3 id="8-验证码输入区域-Captcha-Input-Area"><a class="header-anchor" href="#8-验证码输入区域-Captcha-Input-Area">¶</a>8. <strong>验证码输入区域 (Captcha Input Area)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 1.5rem; position: relative; width: 100%;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: flex; gap: 12px; align-items: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;flex: 1; position: relative;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: var(--current-theme-color, #8CC8FF);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;captcha-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;18&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;3&quot;</span> <span class="attr">y</span>=<span class="string">&quot;3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;18&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;2&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;8.5&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;8.5&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;21 15 16 10 5 21&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;captcha-input&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; padding: 0.85rem 2.5rem; margin-bottom: 0; border: 2px solid transparent; border-radius: 8px; font-size: 16px; transition: all 0.3s ease; background: #f8f9fa; box-sizing: border-box;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;captcha-canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid transparent; border-radius: 8px; cursor: pointer; background: white;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>外层容器</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 验证码区域的容器</li>
<li><code>margin-bottom: 1.5rem</code> - 下边距1.5rem</li>
<li><code>position: relative</code> - 相对定位</li>
<li><code>width: 100%</code> - 宽度占满父容器</li>
</ul>
<p><strong>Flexbox容器</strong>：</p>
<ul>
<li><code>&lt;div style=&quot;display: flex; gap: 12px; align-items: center;&quot;&gt;</code> - Flexbox布局，子元素间距12px，垂直居中对齐</li>
</ul>
<p><strong>验证码输入区域</strong>：</p>
<ul>
<li><code>&lt;div style=&quot;flex: 1; position: relative;&quot;&gt;</code> - 弹性增长1，相对定位</li>
</ul>
<p><strong>验证码图标容器</strong>：</p>
<ul>
<li><code>&lt;div&gt;</code> - 验证码图标的容器</li>
<li><code>id=&quot;captcha-icon&quot;</code> - 验证码图标的唯一标识符</li>
<li><code>position: absolute</code> - 绝对定位</li>
<li><code>left: 12px</code> - 距离左边12px</li>
<li><code>top: 50%</code> - 距离顶部50%</li>
<li><code>transform: translateY(-50%)</code> - 垂直居中</li>
<li><code>color: var(--current-theme-color, #8CC8FF)</code> - 图标颜色</li>
</ul>
<p><strong>验证码图标SVG</strong>：</p>
<ul>
<li><code>&lt;svg width=&quot;18&quot; height=&quot;18&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot;&gt;</code> - 18x18像素的验证码图标</li>
<li><code>&lt;rect x=&quot;3&quot; y=&quot;3&quot; width=&quot;18&quot; height=&quot;18&quot; rx=&quot;2&quot; ry=&quot;2&quot;&gt;</code> - 矩形框</li>
<li><code>&lt;circle cx=&quot;8.5&quot; cy=&quot;8.5&quot; r=&quot;1.5&quot;&gt;</code> - 圆形，中心(8.5,8.5)，半径1.5</li>
<li><code>&lt;polyline points=&quot;21 15 16 10 5 21&quot;&gt;</code> - 折线，连接点(21,15)、(16,10)、(5,21)</li>
</ul>
<p><strong>验证码输入框</strong>：</p>
<ul>
<li><code>&lt;input type=&quot;text&quot; id=&quot;captcha-input&quot; placeholder=&quot;请输入验证码&quot; class=&quot;login-input&quot; style=&quot;...&quot;&gt;</code> - 文本输入框，样式与密码框相同</li>
</ul>
<p><strong>验证码画布</strong>：</p>
<ul>
<li><code>&lt;canvas id=&quot;captcha-canvas&quot; width=&quot;120&quot; height=&quot;40&quot; style=&quot;border: 2px solid transparent; border-radius: 8px; cursor: pointer; background: white;&quot;&gt;</code> - 120x40像素的画布</li>
<li><code>id=&quot;captcha-canvas&quot;</code> - 验证码画布的唯一标识符</li>
<li><code>width=&quot;120&quot; height=&quot;40&quot;</code> - 画布尺寸</li>
<li><code>border: 2px solid transparent</code> - 透明边框</li>
<li><code>border-radius: 8px</code> - 圆角</li>
<li><code>cursor: pointer</code> - 鼠标指针样式</li>
<li><code>background: white</code> - 白色背景</li>
</ul>
<h3 id="9-登录按钮-Login-Button"><a class="header-anchor" href="#9-登录按钮-Login-Button">¶</a>9. <strong>登录按钮 (Login Button)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;enhancedCheckPassword()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; padding: 0.85rem; background: var(--current-theme-color, #8CC8FF); color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: 500; cursor: pointer; transition: all 0.3s ease; text-transform: uppercase; letter-spacing: 0.5px; box-sizing: border-box;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login-button&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;button&gt;</code> - 按钮元素</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>onclick=&quot;enhancedCheckPassword()&quot;</code> - 点击时执行JavaScript函数</li>
<li><code>id=&quot;login-button&quot;</code> - 登录按钮的唯一标识符</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>width: 100%</code> - 宽度占满父容器</li>
<li><code>padding: 0.85rem</code> - 内边距0.85rem</li>
<li><code>background: var(--current-theme-color, #8CC8FF)</code> - 背景色，使用CSS变量</li>
<li><code>color: white</code> - 文字颜色白色</li>
<li><code>border: none</code> - 无边框</li>
<li><code>border-radius: 8px</code> - 8px圆角</li>
<li><code>font-size: 16px</code> - 字体大小16px</li>
<li><code>font-weight: 500</code> - 字体粗细500（中等）</li>
<li><code>cursor: pointer</code> - 鼠标指针样式</li>
<li><code>transition: all 0.3s ease</code> - 所有属性0.3秒缓动过渡</li>
<li><code>text-transform: uppercase</code> - 文字转换为大写</li>
<li><code>letter-spacing: 0.5px</code> - 字母间距0.5px</li>
<li><code>box-sizing: border-box</code> - 盒模型</li>
</ul>
<p><strong>内容</strong>：</p>
<ul>
<li><code>登录</code> - 按钮文字</li>
</ul>
<h3 id="10-错误消息-Error-Message"><a class="header-anchor" href="#10-错误消息-Error-Message">¶</a>10. <strong>错误消息 (Error Message)</strong></h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;error-msg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: #EA4335; margin-top: 1rem; font-size: 0.9rem;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签解释</strong>：</p>
<ul>
<li><code>&lt;p&gt;</code> - 段落元素，用于显示错误信息</li>
</ul>
<p><strong>属性解释</strong>：</p>
<ul>
<li><code>id=&quot;error-msg&quot;</code> - 错误消息的唯一标识符</li>
</ul>
<p><strong>样式属性详解</strong>：</p>
<ul>
<li><code>color: #EA4335</code> - 红色文字颜色</li>
<li><code>margin-top: 1rem</code> - 上边距1rem</li>
<li><code>font-size: 0.9rem</code> - 字体大小0.9rem</li>
</ul>
<h2 id="背景漂浮小球-详细变量和函数解释"><a class="header-anchor" href="#背景漂浮小球-详细变量和函数解释">¶</a>背景漂浮小球 - 详细变量和函数解释</h2>
<h3 id="1-小球生成函数-createBubbles"><a class="header-anchor" href="#1-小球生成函数-createBubbles">¶</a>1. <strong>小球生成函数 (createBubbles)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createBubbles</span>(<span class="params">themeColor = <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bubbles-container&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!container) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清除现有的圆形</span></span><br><span class="line">  container.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取当前主题色</span></span><br><span class="line">  <span class="keyword">let</span> currentTheme = themeColor;</span><br><span class="line">  <span class="keyword">if</span> (!currentTheme) &#123;</span><br><span class="line">    <span class="comment">// 根据当前时间计算主题色</span></span><br><span class="line">    <span class="keyword">const</span> currentHour = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="comment">// ... 时间主题色逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 基于当前主题色生成颜色变体</span></span><br><span class="line">  <span class="keyword">const</span> themeColors = <span class="title function_">generateBubbleColors</span>(currentTheme);</span><br><span class="line">  <span class="keyword">const</span> bubbleCount = <span class="number">15</span>; <span class="comment">// 圆形数量</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; bubbleCount; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> bubble = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 随机大小、位置和透明度</span></span><br><span class="line">    <span class="keyword">const</span> size = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">150</span> + <span class="number">50</span>; <span class="comment">// 50-200px</span></span><br><span class="line">    <span class="keyword">const</span> x = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>; <span class="comment">// 0-100%</span></span><br><span class="line">    <span class="keyword">const</span> y = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>; <span class="comment">// 0-100%</span></span><br><span class="line">    <span class="keyword">const</span> opacity = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">0.4</span> + <span class="number">0.1</span>; <span class="comment">// 0.1-0.5</span></span><br><span class="line">    <span class="keyword">const</span> color = themeColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * themeColors.<span class="property">length</span>)];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置圆形样式</span></span><br><span class="line">    bubble.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`...`</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储圆形的原始位置和移动速度</span></span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">originalX</span> = x;</span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">originalY</span> = y;</span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">speedX</span> = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="number">0.5</span>; <span class="comment">// -0.25 到 0.25</span></span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">speedY</span> = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="number">0.5</span>; <span class="comment">// -0.25 到 0.25</span></span><br><span class="line">    </span><br><span class="line">    container.<span class="title function_">appendChild</span>(bubble);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>函数参数</strong>：</p>
<ul>
<li><code>themeColor = null</code> - 主题色参数，默认为null</li>
</ul>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>container</code> - 获取小球容器的DOM元素</li>
<li><code>currentTheme</code> - 当前主题色</li>
<li><code>currentHour</code> - 当前小时数</li>
<li><code>themeColors</code> - 基于主题色生成的颜色数组</li>
<li><code>bubbleCount</code> - 小球数量，固定为15个</li>
</ul>
<p><strong>循环变量</strong>：</p>
<ul>
<li><code>i</code> - 循环计数器</li>
<li><code>bubble</code> - 新创建的小球DOM元素</li>
</ul>
<p><strong>随机属性变量</strong>：</p>
<ul>
<li><code>size</code> - 小球尺寸，范围50-200px</li>
<li><code>x</code> - 水平位置，范围0-100%</li>
<li><code>y</code> - 垂直位置，范围0-100%</li>
<li><code>opacity</code> - 透明度，范围0.1-0.5</li>
<li><code>color</code> - 随机选择的颜色</li>
</ul>
<p><strong>数据属性</strong>：</p>
<ul>
<li><code>bubble.dataset.originalX</code> - 存储原始X坐标</li>
<li><code>bubble.dataset.originalY</code> - 存储原始Y坐标</li>
<li><code>bubble.dataset.speedX</code> - 存储X方向速度，范围-0.25到0.25</li>
<li><code>bubble.dataset.speedY</code> - 存储Y方向速度，范围-0.25到0.25</li>
</ul>
<h3 id="2-小球动画函数-animateBubbles"><a class="header-anchor" href="#2-小球动画函数-animateBubbles">¶</a>2. <strong>小球动画函数 (animateBubbles)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animateBubbles</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bubbles = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#bubbles-container &gt; div&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!bubbles.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  bubbles.<span class="title function_">forEach</span>(<span class="function"><span class="params">bubble</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前位置和速度</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">parseFloat</span>(bubble.<span class="property">dataset</span>.<span class="property">originalX</span>);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">parseFloat</span>(bubble.<span class="property">dataset</span>.<span class="property">originalY</span>);</span><br><span class="line">    <span class="keyword">const</span> speedX = <span class="built_in">parseFloat</span>(bubble.<span class="property">dataset</span>.<span class="property">speedX</span>);</span><br><span class="line">    <span class="keyword">const</span> speedY = <span class="built_in">parseFloat</span>(bubble.<span class="property">dataset</span>.<span class="property">speedY</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新位置</span></span><br><span class="line">    x = (x + speedX + <span class="number">100</span>) % <span class="number">100</span>;</span><br><span class="line">    y = (y + speedY + <span class="number">100</span>) % <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 应用变换</span></span><br><span class="line">    bubble.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;x&#125;</span>%`</span>;</span><br><span class="line">    bubble.<span class="property">style</span>.<span class="property">top</span> = <span class="string">`<span class="subst">$&#123;y&#125;</span>%`</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存更新后的位置</span></span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">originalX</span> = x;</span><br><span class="line">    bubble.<span class="property">dataset</span>.<span class="property">originalY</span> = y;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(animateBubbles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>bubbles</code> - 所有小球元素的NodeList</li>
<li><code>bubble</code> - 单个小球元素（forEach循环参数）</li>
</ul>
<p><strong>位置和速度变量</strong>：</p>
<ul>
<li><code>x</code> - 当前X坐标（可修改）</li>
<li><code>y</code> - 当前Y坐标（可修改）</li>
<li><code>speedX</code> - X方向速度（常量）</li>
<li><code>speedY</code> - Y方向速度（常量）</li>
</ul>
<p><strong>位置更新逻辑</strong>：</p>
<ul>
<li><code>(x + speedX + 100) % 100</code> - 添加100是为了处理负数，然后取模确保在0-100范围内</li>
<li><code>(y + speedY + 100) % 100</code> - 同样的逻辑应用于Y坐标</li>
</ul>
<h3 id="3-颜色生成函数-generateBubbleColors"><a class="header-anchor" href="#3-颜色生成函数-generateBubbleColors">¶</a>3. <strong>颜色生成函数 (generateBubbleColors)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">generateBubbleColors</span>(<span class="params">baseColor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!baseColor.<span class="title function_">startsWith</span>(<span class="string">&#x27;#&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;#333333&#x27;</span>, <span class="string">&#x27;#666666&#x27;</span>, <span class="string">&#x27;#999999&#x27;</span>, <span class="string">&#x27;#555555&#x27;</span>, <span class="string">&#x27;#777777&#x27;</span>, <span class="string">&#x27;#444444&#x27;</span>, <span class="string">&#x27;#888888&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> r = <span class="built_in">parseInt</span>(baseColor.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>), <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">const</span> g = <span class="built_in">parseInt</span>(baseColor.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">5</span>), <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="built_in">parseInt</span>(baseColor.<span class="title function_">slice</span>(<span class="number">5</span>, <span class="number">7</span>), <span class="number">16</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    baseColor, <span class="comment">// 原始颜色</span></span><br><span class="line">    <span class="comment">// 变亮20%</span></span><br><span class="line">    <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.min(<span class="number">255</span>, <span class="built_in">Math</span>.floor(r * <span class="number">1.2</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.min(<span class="number">255</span>, <span class="built_in">Math</span>.floor(g * <span class="number">1.2</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.min(<span class="number">255</span>, <span class="built_in">Math</span>.floor(b * <span class="number">1.2</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// 变暗20%</span></span><br><span class="line">    <span class="string">`#<span class="subst">$&#123;<span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.floor(r * <span class="number">0.8</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.floor(g * <span class="number">0.8</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.floor(b * <span class="number">0.8</span>)).toString(<span class="number">16</span>).padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">    <span class="comment">// 其他颜色变体...</span></span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>函数参数</strong>：</p>
<ul>
<li><code>baseColor</code> - 基础颜色，十六进制格式</li>
</ul>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>r</code> - 红色分量，从十六进制字符串中提取并转换为十进制</li>
<li><code>g</code> - 绿色分量</li>
<li><code>b</code> - 蓝色分量</li>
</ul>
<p><strong>颜色处理逻辑</strong>：</p>
<ul>
<li><code>baseColor.slice(1, 3)</code> - 提取红色分量（跳过#符号）</li>
<li><code>parseInt(..., 16)</code> - 将十六进制字符串转换为十进制整数</li>
<li><code>Math.min(255, ...)</code> - 确保不超过255的最大值</li>
<li><code>Math.max(0, ...)</code> - 确保不低于0的最小值</li>
<li><code>.toString(16)</code> - 转换回十六进制字符串</li>
<li><code>.padStart(2, '0')</code> - 确保至少2位，不足用0填充</li>
</ul>
<h3 id="4-鼠标交互函数-addMouseInteraction"><a class="header-anchor" href="#4-鼠标交互函数-addMouseInteraction">¶</a>4. <strong>鼠标交互函数 (addMouseInteraction)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addMouseInteraction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bubbles = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#bubbles-container &gt; div&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!bubbles.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mouseX = e.<span class="property">clientX</span>;</span><br><span class="line">    <span class="keyword">const</span> mouseY = e.<span class="property">clientY</span>;</span><br><span class="line">    <span class="keyword">const</span> threshold = <span class="number">200</span>; <span class="comment">// 鼠标影响范围</span></span><br><span class="line">    </span><br><span class="line">    bubbles.<span class="title function_">forEach</span>(<span class="function"><span class="params">bubble</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> bubbleRect = bubble.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">      <span class="keyword">const</span> bubbleX = bubbleRect.<span class="property">left</span> + bubbleRect.<span class="property">width</span> / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">const</span> bubbleY = bubbleRect.<span class="property">top</span> + bubbleRect.<span class="property">height</span> / <span class="number">2</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 计算鼠标和圆形之间的距离</span></span><br><span class="line">      <span class="keyword">const</span> dx = mouseX - bubbleX;</span><br><span class="line">      <span class="keyword">const</span> dy = mouseY - bubbleY;</span><br><span class="line">      <span class="keyword">const</span> distance = <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果圆形在鼠标影响范围内，则移动它</span></span><br><span class="line">      <span class="keyword">if</span> (distance &lt; threshold) &#123;</span><br><span class="line">        <span class="keyword">const</span> force = (threshold - distance) / threshold; <span class="comment">// 力量与距离成反比</span></span><br><span class="line">        <span class="keyword">const</span> angle = <span class="title class_">Math</span>.<span class="title function_">atan2</span>(dy, dx);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算移动方向（远离鼠标）</span></span><br><span class="line">        <span class="keyword">const</span> moveX = <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle + <span class="title class_">Math</span>.<span class="property">PI</span>) * force * <span class="number">30</span>; <span class="comment">// 远离鼠标的方向</span></span><br><span class="line">        <span class="keyword">const</span> moveY = <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle + <span class="title class_">Math</span>.<span class="property">PI</span>) * force * <span class="number">30</span>;</span><br><span class="line">        </span><br><span class="line">        bubble.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(-50%, -50%) translate(<span class="subst">$&#123;moveX&#125;</span>px, <span class="subst">$&#123;moveY&#125;</span>px)`</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果远离鼠标，恢复原始位置</span></span><br><span class="line">        bubble.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translate(-50%, -50%)&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>bubbles</code> - 所有小球元素</li>
<li><code>e</code> - 鼠标移动事件对象</li>
</ul>
<p><strong>鼠标位置变量</strong>：</p>
<ul>
<li><code>mouseX</code> - 鼠标X坐标</li>
<li><code>mouseY</code> - 鼠标Y坐标</li>
<li><code>threshold</code> - 鼠标影响范围，200像素</li>
</ul>
<p><strong>小球位置变量</strong>：</p>
<ul>
<li><code>bubbleRect</code> - 小球的位置和尺寸信息</li>
<li><code>bubbleX</code> - 小球中心X坐标</li>
<li><code>bubbleY</code> - 小球中心Y坐标</li>
</ul>
<p><strong>距离计算变量</strong>：</p>
<ul>
<li><code>dx</code> - X方向距离差</li>
<li><code>dy</code> - Y方向距离差</li>
<li><code>distance</code> - 欧几里得距离</li>
</ul>
<p><strong>移动计算变量</strong>：</p>
<ul>
<li><code>force</code> - 移动力量，与距离成反比</li>
<li><code>angle</code> - 角度，使用Math.atan2计算</li>
<li><code>moveX</code> - X方向移动距离</li>
<li><code>moveY</code> - Y方向移动距离</li>
</ul>
<h3 id="5-小球破裂动画函数-animateBubblesBurst"><a class="header-anchor" href="#5-小球破裂动画函数-animateBubblesBurst">¶</a>5. <strong>小球破裂动画函数 (animateBubblesBurst)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animateBubblesBurst</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> bubbles = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;#bubbles-container &gt; div&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!bubbles.<span class="property">length</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  bubbles.<span class="title function_">forEach</span>(<span class="function">(<span class="params">bubble, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟动画，使破裂有层次感</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      bubble.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 0.6s ease-out&#x27;</span>;</span><br><span class="line">      bubble.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translate(-50%, -50%) scale(1.5)`</span>;</span><br><span class="line">      bubble.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      bubble.<span class="property">style</span>.<span class="property">filter</span> = <span class="string">&#x27;blur(10px)&#x27;</span>;</span><br><span class="line">    &#125;, index * <span class="number">50</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 动画结束后移除圆形</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;bubbles-container&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>bubbles</code> - 所有小球元素</li>
<li><code>bubble</code> - 单个小球元素</li>
<li><code>index</code> - 小球在数组中的索引</li>
</ul>
<p><strong>动画延迟</strong>：</p>
<ul>
<li><code>index * 50</code> - 每个小球延迟50毫秒，创造层次感</li>
</ul>
<p><strong>动画属性</strong>：</p>
<ul>
<li><code>transition: 'all 0.6s ease-out'</code> - 所有属性0.6秒缓出过渡</li>
<li><code>transform: 'translate(-50%, -50%) scale(1.5)'</code> - 保持居中并放大1.5倍</li>
<li><code>opacity: '0'</code> - 透明度变为0</li>
<li><code>filter: 'blur(10px)'</code> - 模糊效果10像素</li>
</ul>
<p><strong>清理延迟</strong>：</p>
<ul>
<li><code>1000</code> - 1秒后清理所有小球</li>
</ul>
<h3 id="6-磨砂背景消失动画函数-animateFrostedBgFadeOut"><a class="header-anchor" href="#6-磨砂背景消失动画函数-animateFrostedBgFadeOut">¶</a>6. <strong>磨砂背景消失动画函数 (animateFrostedBgFadeOut)</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animateFrostedBgFadeOut</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> frostedBg = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;frosted-bg&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!frostedBg) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  frostedBg.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;all 1.5s ease-out&#x27;</span>;</span><br><span class="line">  frostedBg.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  frostedBg.<span class="property">style</span>.<span class="property">backdropFilter</span> = <span class="string">&#x27;blur(0px)&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>局部变量详解</strong>：</p>
<ul>
<li><code>frostedBg</code> - 磨砂背景元素</li>
</ul>
<p><strong>动画属性</strong>：</p>
<ul>
<li><code>transition: 'all 1.5s ease-out'</code> - 所有属性1.5秒缓出过渡</li>
<li><code>opacity: '0'</code> - 透明度变为0</li>
<li><code>backdropFilter: 'blur(0px)'</code> - 背景模糊效果消失</li>
</ul>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p>这个登录系统通过精心设计的HTML结构、CSS样式和JavaScript逻辑，实现了一个功能完整、视觉效果丰富的登录界面。每个标签和变量都有其特定的作用和意义，共同构成了一个现代化的用户体验。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客系统</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>git快速上手</title>
    <url>/2025/08/26/git%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<p>要在本地创建Git仓库仓库并连接到远程仓库 <code>git@github.com:xxxx/xxxxxxxx.git</code>，可以按照以下步骤操作：</p>
<span id="more"></span>
<h5 id="1-首先在本地选择一个目录作为仓库存放位置，打开终端并进入该目录："><a class="header-anchor" href="#1-首先在本地选择一个目录作为仓库存放位置，打开终端并进入该目录：">¶</a>1.首先在本地选择一个目录作为仓库存放位置，打开终端并进入该目录：</h5>
<p><code>cd /path/to/your/local/directory</code></p>
<h5 id="2-初始化本地Git仓库："><a class="header-anchor" href="#2-初始化本地Git仓库：">¶</a>2.初始化本地Git仓库：</h5>
<p><code>  git init</code></p>
<h5 id="3-将本地仓库与远程仓库关联："><a class="header-anchor" href="#3-将本地仓库与远程仓库关联：">¶</a>3.将本地仓库与远程仓库关联：</h5>
<p><code> git remote add origin git@github.com:xxxxx/xxxxxx.git</code></p>
<p>验证远程仓库连接是否成功：</p>
<p><code> git remote -v</code></p>
<p>如果成功，会显示类似以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin git@github.com:xxxxx/xxxxxxx.git (fetch) </span><br><span class="line">origin git@github.com:xxxxx/xxxxxxx.git (push)</span><br></pre></td></tr></table></figure>
<p>从远程仓库拉取代码（如果远程已有内容）：</p>
<p><code>git pull origin main</code></p>
<p>(如果默认分支不是main，可以替换为实际的分支名，如master）</p>
<h5 id="4-添加到本地工作区："><a class="header-anchor" href="#4-添加到本地工作区：">¶</a>4.添加到本地工作区：</h5>
<p><code> git add</code> .</p>
<h5 id="5-提交给本地仓库："><a class="header-anchor" href="#5-提交给本地仓库：">¶</a>5.提交给本地仓库：</h5>
<p><code>git commit -m &quot;这是提交的描述内容&quot;</code></p>
<h5 id="6-提交到远程仓库："><a class="header-anchor" href="#6-提交到远程仓库：">¶</a>6.提交到远程仓库：</h5>
<p><code>git push origin master (master对应提交的远程仓库分支）</code></p>
<p>创建并切换本地仓库分支：<br>
<code>git checkout -b dev</code></p>
<p>提交当前分支：</p>
<p><code>git push -u origin dev</code></p>
<h5 id="7-切换本地分支："><a class="header-anchor" href="#7-切换本地分支：">¶</a>7.切换本地分支：</h5>
<p><code>git checkout master </code></p>
<h5 id="8-合并分支："><a class="header-anchor" href="#8-合并分支：">¶</a>8.合并分支：</h5>
<p>在master分支合并dev分支，合并之后dev分支仍然存在<br>
<code>git merge dev</code></p>
<p>然后<code>git push</code>提交</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>go中的context</title>
    <url>/2025/08/31/go%E4%B8%AD%E7%9A%84context/</url>
    <content><![CDATA[<p>在 Go 语言中，<code>context.Context</code> 主要用于 <strong>传递跨 goroutine 的取消信号、超时控制和元数据</strong>，是 Go 并发模型中协调多个 goroutine 生命周期的核心机制。其设计与 Go 语言的 <strong>轻量并发（goroutine）</strong> 和 <strong>函数式编程风格</strong> 密切相关。</p>
<h3 id="一、Go-中大量使用-context-的原因"><a class="header-anchor" href="#一、Go-中大量使用-context-的原因">¶</a>一、Go 中大量使用 <code>context</code> 的原因</h3>
<ol>
<li><strong>goroutine 生命周期管理</strong><br>
Go 中创建 goroutine 非常轻量（几 KB 栈空间），实际开发中常同时启动成百上千个 goroutine 处理任务（如 HTTP 服务的每个请求对应一个 goroutine）。<code>context</code> 用于在这些 goroutine 之间传递 <strong>取消信号</strong>（如客户端断开连接、超时），避免资源泄漏。<br>
例如：HTTP 服务器处理请求时，若客户端提前关闭连接，<code>context</code> 会收到取消信号，后续的数据库查询、RPC 调用等可立即终止。</li>
<li><strong>超时与截止时间控制</strong><br>
网络请求、数据库操作等需要设置超时时间，<code>context.WithTimeout</code> 或 <code>context.WithDeadline</code> 可生成带超时的上下文，传递给下游函数，确保操作不会无限阻塞。</li>
<li><strong>元数据传递</strong><br>
<code>context</code> 可携带少量跨函数的共享数据（如请求 ID、用户身份信息），避免在函数参数中显式传递这些 “附加信息”，简化接口设计。</li>
</ol>
<h3 id="二、其他语言中的同类机制"><a class="header-anchor" href="#二、其他语言中的同类机制">¶</a>二、其他语言中的同类机制</h3>
<p><code>context</code> 并非 Go 独有，其他语言也有类似功能的机制，只是实现方式和命名不同：</p>
<h4 id="1-Java-中的同类机制"><a class="header-anchor" href="#1-Java-中的同类机制">¶</a>1. Java 中的同类机制</h4>
<ul>
<li>
<p><strong><code>ThreadLocal</code> + 线程池</strong><br>
Java 中常用 <code>ThreadLocal</code> 传递线程级别的上下文（如用户信息、日志 ID），配合线程池的 <code>shutdown()</code> 或 <code>shutdownNow()</code> 控制线程生命周期。但 <code>ThreadLocal</code> 不直接支持取消信号，需手动实现。</p>
</li>
<li>
<p><strong><code>CompletableFuture</code> + 超时控制</strong><br>
Java 8+ 的 <code>CompletableFuture</code> 支持超时机制（<code>orTimeout()</code>），可实现类似 <code>context.WithTimeout</code> 的功能：</p>
<p>java</p>
<p>运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 耗时操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 超时控制（5秒）</span></span><br><span class="line">future.orTimeout(<span class="number">5</span>, TimeUnit.SECONDS)</span><br><span class="line">      .exceptionally(ex -&gt; <span class="string">&quot;超时处理&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>Spring</code> 框架的 <code>RequestContextHolder</code></strong><br>
在 Spring Web 中，<code>RequestContextHolder</code> 存储 HTTP 请求上下文，类似 <code>context</code> 传递请求级别的元数据，但其生命周期与请求绑定，不支持主动取消。</p>
</li>
</ul>
<h4 id="2-C-语言中的同类机制"><a class="header-anchor" href="#2-C-语言中的同类机制">¶</a>2. C 语言中的同类机制</h4>
<p>C 语言没有内置的 “上下文” 机制，需手动实现类似功能：</p>
<ul>
<li>
<p><strong>自定义结构体传递取消信号</strong><br>
通过指针传递包含 “取消标志” 的结构体，函数定期检查标志以决定是否终止：</p>
<p>c</p>
<p>运行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义上下文结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> is_canceled;  <span class="comment">// 取消标志</span></span><br><span class="line">    <span class="type">int</span> timeout;      <span class="comment">// 超时时间（毫秒）</span></span><br><span class="line">&#125; Context;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数接收上下文，定期检查是否取消</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">do_task</span><span class="params">(Context* ctx)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx-&gt;is_canceled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// 收到取消信号，退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行任务...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>信号量（<code>signal</code>）与定时器</strong><br>
利用系统信号（如 <code>SIGINT</code>）或定时器（<code>setitimer</code>）实现超时和取消，但跨线程 / 进程传递信号较复杂，缺乏 Go 中 <code>context</code> 的简洁性。</p>
</li>
</ul>
<h3 id="三、核心差异总结"><a class="header-anchor" href="#三、核心差异总结">¶</a>三、核心差异总结</h3>
<table>
<thead>
<tr>
<th>语言</th>
<th>同类机制</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>Go</td>
<td><code>context.Context</code></td>
<td>原生支持，轻量，与 goroutine 绑定，统一传递取消信号、超时和元数据</td>
</tr>
<tr>
<td>Java</td>
<td><code>ThreadLocal</code> + 超时 API</td>
<td>依赖线程模型，需结合框架（如 Spring）实现上下文传递，取消机制较分散</td>
</tr>
<tr>
<td>C</td>
<td>自定义结构体 + 信号量</td>
<td>无原生支持，需手动实现，功能简陋，缺乏语言层面的统一标准</td>
</tr>
</tbody>
</table>
<h3 id="为什么-Go-中-context-更-“显性”？"><a class="header-anchor" href="#为什么-Go-中-context-更-“显性”？">¶</a>为什么 Go 中 <code>context</code> 更 “显性”？</h3>
<p>Go 语言将 <code>context</code> 作为函数参数显式传递，是因为：</p>
<ol>
<li><strong>并发模型的需要</strong>：goroutine 比线程更轻量，数量更多，必须有统一的生命周期管理机制；</li>
<li><strong>接口设计哲学</strong>：Go 强调 “显式优于隐式”，<code>context</code> 作为参数传递，让函数的依赖和行为更清晰；</li>
<li><strong>标准化</strong>：<code>context</code> 是 Go 标准库的一部分，所有库（如 <code>net/http</code>、<code>database/sql</code>）都遵循同一套上下文协议，避免了生态碎片化。</li>
</ol>
<p>其他语言因历史原因（如 Java 基于线程模型）或设计理念不同，没有采用这种 “显式上下文参数” 的模式，但核心解决的问题（生命周期管理、元数据传递）是相通的。</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>context</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言简单入门</title>
    <url>/2025/08/27/go%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1-在定义函数时，参数的类型是写在参数名称之后的"><a class="header-anchor" href="#1-在定义函数时，参数的类型是写在参数名称之后的">¶</a>1.在定义函数时，参数的类型是写在参数名称<mark>之后的</mark></h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DoPost</span><span class="params">(ctx context.Context, crypto *AESCrypto, path, encryptBody <span class="type">string</span>)</span></span> (outDatamap[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;, err <span class="type">error</span>) </span><br></pre></td></tr></table></figure>
<p>并且函数的出参直接在入参之后加上（）</p>
<p>注意，不仅仅是函数的入参以及出参是这样的，整个go语言都是将数据类型放在数据名称之后的</p>
<h3 id="2-键值对直接插入定义"><a class="header-anchor" href="#2-键值对直接插入定义">¶</a>2.键值对直接插入定义</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br></pre></td></tr></table></figure>
<p>这里代表创建了一个params的键值对元组，其中key值使用的是string类型，value值使用的是string类型</p>
<h3 id="3-包内函数调用方式"><a class="header-anchor" href="#3-包内函数调用方式">¶</a>3.包内函数调用方式</h3>
<p>在 Go 语言中，导入包后可以直接通过<mark>包名调用包内的导出</mark>方法（首字母<mark>大写</mark>的函数、变量等），形式为 包名.方法名()，这是 Go 语言的标准用法，GoFrame 框架也遵循这一规则。</p>
<p>注意这里还有一条规则，就是函数名为首字母大写的函数可以被包内同级程序（直接使用函数名调用）和包外程序（使用时加上包名.）调用，而首字母小写的函数则是<mark>只能</mark>被包内同级程序调用（也就是包内的子包的程序是无法调用的），如果是包外则<mark>无法调用</mark>，如果必须调用，可以在包内添加一个桥接函数（以大写字母开头，引用小写字母的私有函数）。</p>
<ul>
<li>
<p>注意上述对于包中函数调用的描述同样也适用于变量</p>
</li>
<li>
<p>Type 创建和管理类型，可以创建自定义类型，或者是将类型取一个别名，创建接口，将多个类型分组定义</p>
</li>
<li>
<p>面向接口开发，利于解耦，允许先使用后定义，也就是函数的入参可以放置在函数的下方</p>
</li>
<li>
<p>和c语言，c++一样支持指针操作，<code>var SyncUserList = &amp;qSyncUserList&#123;&#125;</code>代表syncuserlist的值是取qsyncuserlist的地址*abc代表是指针</p>
</li>
</ul>
 <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="function"><span class="keyword">func</span> <span class="params">(q *qSyncUserList)</span></span> GetTopic() <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> TaskSyncUserList</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代表q指针指向的结构体是gettopic方法的接受体，也就是q指针指向的结构体有这个函数，并且只有这个指针可以调用</p>
<h3 id="5-结构体定义"><a class="header-anchor" href="#5-结构体定义">¶</a>5.结构体定义</h3>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UserGroupRelation <span class="keyword">struct</span> &#123;</span><br><span class="line">CustId <span class="type">string</span> <span class="string">`json:&quot;custId&quot; dc:&quot;客户编码&quot;`</span></span><br><span class="line">GroupId <span class="type">string</span> <span class="string">`json:&quot;groupId&quot; dc:&quot;组别编码&quot;`</span></span><br><span class="line">DataSources <span class="type">string</span> <span class="string">`json:&quot;dataSources&quot; dc:&quot;数据来源&quot;`</span></span><br><span class="line">AvailCode  <span class="type">string</span> <span class="string">`json:&quot;availCode&quot; dc:&quot;有效性标识&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里面每个参数最后的反引号的内容代表了是 Go 语言的<strong>结构体标签</strong>，用于为字段提供额外的元信息，供程序运行时通过反射（reflect）读取和使用。这里包含两类标签：</p>
<ul>
<li>json:&quot;custId&quot;：用于     JSON 序列化 / 反序列化时的字段映射。表示当结构体与 JSON 互转时，CustId 字段会对应 JSON 中的 custId 键（小写开头，符合     JSON 命名习惯）。</li>
<li>dc:&quot;客户编码&quot;：这是一个自定义标签（可能是项目内部约定，如     “数据字典” 或 “文档注释”），用于说明字段的业务含义，方便开发者理解或自动生成文档。</li>
</ul>
<h6 id=""><a class="header-anchor" href="#">¶</a></h6>
]]></content>
      <categories>
        <category>go语言教程</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>goframe框架介绍</title>
    <url>/2025/08/31/goframe%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Go（又称 Golang）是 Google 开发的静态强类型编程语言，而 GoFrame（简称 gf）是基于 Go 语言的一款现代化、企业级开发框架。二者的关系类似于 “JavaScript 与 Vue.js”“Java 与 Spring”——<strong>Go 是基础语言，GoFrame 是基于 Go 语言的上层框架</strong>，用于简化 Go 语言的工程化开发。</p>
<h3 id="一、区别与联系"><a class="header-anchor" href="#一、区别与联系">¶</a>一、区别与联系</h3>
<table>
<thead>
<tr>
<th>维度</th>
<th>Go（语言）</th>
<th>GoFrame（框架）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>定位</strong></td>
<td>编程语言，提供语法、 runtime、标准库等基础能力</td>
<td>基于 Go 的开发框架，封装了 Web、ORM、缓存等上层组件</td>
</tr>
<tr>
<td><strong>依赖关系</strong></td>
<td>独立存在，是 GoFrame 的基础</td>
<td>完全依赖 Go 语言，无法脱离 Go 运行</td>
</tr>
<tr>
<td><strong>核心目标</strong></td>
<td>提供简洁、高效、并发安全的语言特性</td>
<td>提供工程化开发规范和工具链，简化复杂业务开发</td>
</tr>
<tr>
<td><strong>使用场景</strong></td>
<td>所有 Go 语言能覆盖的领域（后端、云原生等）</td>
<td>主要用于快速开发企业级应用（Web API、微服务等）</td>
</tr>
</tbody>
</table>
<h3 id="二、语法区别"><a class="header-anchor" href="#二、语法区别">¶</a>二、语法区别</h3>
<p>GoFrame<strong>不改变 Go 语言本身的语法</strong>（它是框架而非语言扩展），但在<strong>代码规范、开发模式</strong>上有自己的约定，与原生 Go 开发相比有以下差异：</p>
<ol>
<li>
<p><strong>代码组织规范</strong><br>
原生 Go 没有强制的项目结构，而 GoFrame 通过<code>gf cli</code>工具生成标准化项目结构（如<code>api</code>、<code>model</code>、<code>service</code>分层），强制约束代码组织方式，便于团队协作。</p>
</li>
<li>
<p><strong>结构体标签（Tag）扩展</strong><br>
GoFrame 定义了专属的结构体标签（如<code>v:&quot;required&quot;</code>用于参数验证、<code>orm:&quot;name&quot;</code>用于数据库映射），这些标签是框架层面的约定，而非 Go 语言原生语法：</p>
<p>go</p>
<p>运行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GoFrame中用于参数验证和ORM映射的结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id    <span class="type">int</span>    <span class="string">`v:&quot;required&quot; orm:&quot;id,pk&quot;`</span>  <span class="comment">// gf的验证和ORM标签</span></span><br><span class="line">    Name  <span class="type">string</span> <span class="string">`v:&quot;required|length:2,10&quot;`</span>   <span class="comment">// gf的参数验证规则</span></span><br><span class="line">    Age   <span class="type">int</span>    <span class="string">`v:&quot;min:0|max:150&quot;`</span>          <span class="comment">// 原生Go不识别这些标签，由gf框架解析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>函数命名与接口设计</strong><br>
GoFrame 遵循 “<code>CamelCase</code>+ 前缀约定”（如<code>ghttp.Get</code>、<code>gorm.Insert</code>），且大量使用接口抽象（如<code>gdb.ORM</code>接口），而原生 Go 标准库的函数命名更简洁（如<code>http.Get</code>、<code>sql.Query</code>）。</p>
</li>
</ol>
<h3 id="三、实现-API-接口时的区别"><a class="header-anchor" href="#三、实现-API-接口时的区别">¶</a>三、实现 API 接口时的区别</h3>
<p>以实现一个 “用户注册” API（POST <code>/user/register</code>）为例，对比原生 Go 与 GoFrame 的开发差异：</p>
<h4 id="1-原生-Go-实现（依赖标准库net-http）"><a class="header-anchor" href="#1-原生-Go-实现（依赖标准库net-http）">¶</a>1. 原生 Go 实现（依赖标准库<code>net/http</code>）</h4>
<p>需要手动处理路由、参数解析、验证、错误处理等，代码繁琐：</p>
<p>go</p>
<p>运行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义请求结构体</span></span><br><span class="line"><span class="keyword">type</span> RegisterRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age   <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">    Email <span class="type">string</span> <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 注册路由</span></span><br><span class="line">    http.HandleFunc(<span class="string">&quot;/user/register&quot;</span>, registerHandler)</span><br><span class="line">    http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1. 校验请求方法</span></span><br><span class="line">    <span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">        w.WriteHeader(http.StatusMethodNotAllowed)</span><br><span class="line">        w.Write([]<span class="type">byte</span>(<span class="string">&quot;method not allowed&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 解析请求体</span></span><br><span class="line">    <span class="keyword">var</span> req RegisterRequest</span><br><span class="line">    <span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        w.Write([]<span class="type">byte</span>(<span class="string">&quot;invalid request: &quot;</span> + err.Error()))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 手动验证参数</span></span><br><span class="line">    <span class="keyword">if</span> req.Name == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        w.Write([]<span class="type">byte</span>(<span class="string">&quot;name is required&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> req.Age &lt;= <span class="number">0</span> || req.Age &gt; <span class="number">150</span> &#123;</span><br><span class="line">        w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">        w.Write([]<span class="type">byte</span>(<span class="string">&quot;age must be 1-150&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 模拟数据库操作（需手动写SQL或集成第三方ORM）</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 返回响应</span></span><br><span class="line">    w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">    json.NewEncoder(w).Encode(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>:    <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;register success&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-GoFrame-实现"><a class="header-anchor" href="#2-GoFrame-实现">¶</a>2. GoFrame 实现</h4>
<p>框架封装了路由、参数绑定、验证、ORM 等功能，代码更简洁：</p>
<p>go</p>
<p>运行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/gogf/gf/v2/frame/g&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/gogf/gf/v2/net/ghttp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义请求结构体（通过gf标签实现自动验证）</span></span><br><span class="line"><span class="keyword">type</span> RegisterRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">    g.Meta <span class="string">`path:&quot;/user/register&quot; method:&quot;post&quot;`</span> <span class="comment">// 路由和方法定义</span></span><br><span class="line">    Name   <span class="type">string</span> <span class="string">`json:&quot;name&quot; v:&quot;required#姓名不能为空&quot;`</span>   <span class="comment">// 自动验证规则</span></span><br><span class="line">    Age    <span class="type">int</span>    <span class="string">`json:&quot;age&quot; v:&quot;min:1|max:150#年龄必须在1-150之间&quot;`</span> <span class="comment">// 自动验证</span></span><br><span class="line">    Email  <span class="type">string</span> <span class="string">`json:&quot;email&quot; v:&quot;email#邮箱格式错误&quot;`</span>       <span class="comment">// 内置邮箱验证</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义响应结构体</span></span><br><span class="line"><span class="keyword">type</span> RegisterResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">    Code    <span class="type">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">    Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := g.Server()</span><br><span class="line">    <span class="comment">// 绑定API处理函数（自动关联路由和验证）</span></span><br><span class="line">    s.BindHandler(<span class="built_in">new</span>(RegisterRequest), registerHandler)</span><br><span class="line">    s.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数（参数自动绑定和验证）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerHandler</span><span class="params">(r *ghttp.Request)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> req RegisterRequest</span><br><span class="line">    <span class="comment">// 自动解析请求并验证参数（失败会自动返回错误）</span></span><br><span class="line">    <span class="keyword">if</span> err := r.Parse(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        r.Response.WriteJson(RegisterResponse&#123;</span><br><span class="line">            Code:    <span class="number">1</span>,</span><br><span class="line">            Message: err.Error(),</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 数据库操作（通过gf的ORM快速实现，无需手写SQL）</span></span><br><span class="line">    <span class="comment">// g.DB().Model(&quot;user&quot;).Insert(req)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 返回响应</span></span><br><span class="line">    r.Response.WriteJson(RegisterResponse&#123;</span><br><span class="line">        Code:    <span class="number">0</span>,</span><br><span class="line">        Message: <span class="string">&quot;register success&quot;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四、GoFrame-主要提升的能力"><a class="header-anchor" href="#四、GoFrame-主要提升的能力">¶</a>四、GoFrame 主要提升的能力</h3>
<p>GoFrame 的核心价值是<strong>降低 Go 语言开发的 “工程化成本”</strong>，主要提升点包括：</p>
<ol>
<li><strong>简化重复工作</strong><br>
封装了 Web 开发中的通用需求（路由、参数验证、中间件、ORM、缓存等），避免开发者重复造轮子。例如：
<ul>
<li>内置参数验证器（支持正则、范围、自定义规则），无需手动写 if-else 校验；</li>
<li>ORM 支持自动生成 SQL、事务、关联查询，简化数据库操作。</li>
</ul>
</li>
<li><strong>标准化开发流程</strong><br>
通过<code>gf cli</code>工具生成标准化项目结构（API 层、业务层、数据层分离），并提供统一的错误处理、日志、配置管理机制，解决团队协作中的 “代码风格混乱” 问题。</li>
<li><strong>增强企业级特性</strong><br>
提供微服务、分布式事务、分布式缓存、API 文档自动生成（OpenAPI）等企业级功能，原生 Go 需集成多个第三方库才能实现，而 GoFrame 一站式支持。</li>
<li><strong>提升开发效率</strong><br>
支持热重载（<code>gf run</code>）、代码生成（<code>gf gen</code>）、接口自动化测试等工具，大幅缩短开发周期。例如：通过结构体标签自动生成 Swagger 文档，无需手动编写。</li>
<li><strong>优化性能与稳定性</strong><br>
框架内部对并发、内存管理做了针对性优化（如对象池、连接池），且经过大量生产环境验证，稳定性优于 “原生 + 零散第三方库” 的组合。</li>
</ol>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3>
<ul>
<li><strong>联系</strong>：GoFrame 是 Go 语言的 “增强工具”，完全基于 Go 语法开发，依赖 Go 的 runtime。</li>
<li><strong>区别</strong>：Go 是语言基础，GoFrame 是框架；前者提供语法和标准库，后者提供工程化解决方案。</li>
<li><strong>核心价值</strong>：GoFrame 通过封装通用能力、标准化开发流程，让开发者更专注于业务逻辑，而非重复的技术细节，特别适合快速开发企业级应用。</li>
</ul>
]]></content>
      <categories>
        <category>go</category>
        <category>goframe</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>goframe</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next博客搭建</title>
    <url>/2025/08/28/hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>以下是使用 Hexo 和 Next 主题搭建个人博客的详细教程：</p>
<h3 id="一、环境准备"><a class="header-anchor" href="#一、环境准备">¶</a>一、环境准备</h3>
<ol>
<li>
<p><strong>安装 Node.js</strong></p>
<ul>
<li>访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载并安装（推荐 LTS 版本）</li>
<li>验证安装：<code>node -v</code> 和 <code>npm -v</code> 能显示版本号</li>
</ul>
</li>
<li>
<p><strong>安装 Git</strong></p>
<ul>
<li>访问 <a href="https://git-scm.com/">Git 官网</a> 下载对应系统版本</li>
<li>验证安装：<code>git --version</code></li>
</ul>
</li>
<li>
<p><strong>安装 Hexo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>验证安装：<code>hexo -v</code></p>
</li>
</ol>
<h3 id="二、初始化博客"><a class="header-anchor" href="#二、初始化博客">¶</a>二、初始化博客</h3>
<ol>
<li>
<p><strong>创建博客目录并初始化</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> my-hexo-blog &amp;&amp; <span class="built_in">cd</span> my-hexo-blog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Hexo</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>本地预览</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动本地服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:4000</code> 即可看到默认博客页面</p>
</li>
</ol>
<h3 id="三、安装-Next-主题"><a class="header-anchor" href="#三、安装-Next-主题">¶</a>三、安装 Next 主题</h3>
<ol>
<li>
<p><strong>下载 Next 主题</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 themes 目录</span></span><br><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆 Next 仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回博客根目录</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>配置 Next 主题</strong><br>
编辑博客根目录下的 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到 theme 配置项，修改为 next</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>验证主题安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g      <span class="comment"># 重新生成</span></span><br><span class="line">hexo s      <span class="comment"># 启动服务器</span></span><br></pre></td></tr></table></figure>
<p>刷新页面即可看到 Next 主题效果</p>
</li>
</ol>
<h3 id="四、基础配置"><a class="header-anchor" href="#四、基础配置">¶</a>四、基础配置</h3>
<ol>
<li>
<p><strong>站点配置</strong>（<code>_config.yml</code>）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">你的博客名称</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">博客副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">博客描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># 设置为中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>  <span class="comment"># 设置时区</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Next 主题配置</strong><br>
复制 <code>themes/next/_config.yml</code> 到根目录，并重命名为 <code>_config.next.yml</code>，然后进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择主题风格</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Muse</span>  <span class="comment"># 可选: Muse, Mist, Pisces, Gemini</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单配置</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/yourname</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/yourname</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-twitter</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="五、发布文章"><a class="header-anchor" href="#五、发布文章">¶</a>五、发布文章</h3>
<ol>
<li>
<p><strong>创建新文章</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure>
<p>文章会生成在 <code>source/_posts/</code> 目录下，格式为 Markdown</p>
</li>
<li>
<p><strong>文章头部配置示例</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 我的第一篇文章</span><br><span class="line">date: 2023-10-01 12:00:00</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  -</span> 教程</span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line">categories:</span><br><span class="line"><span class="section">  - 技术</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">这里是文章内容...</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>创建页面</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span>  <span class="comment"># 创建关于页面</span></span><br><span class="line">hexo new page <span class="string">&quot;tags&quot;</span>   <span class="comment"># 创建标签页</span></span><br><span class="line">hexo new page <span class="string">&quot;categories&quot;</span>  <span class="comment"># 创建分类页</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="六、部署到-GitHub-Pages"><a class="header-anchor" href="#六、部署到-GitHub-Pages">¶</a>六、部署到 GitHub Pages</h3>
<ol>
<li>
<p><strong>安装部署插件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>配置部署信息</strong>（<code>_config.yml</code>）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>部署博客</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d  <span class="comment"># 生成并部署</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="七、常用命令总结"><a class="header-anchor" href="#七、常用命令总结">¶</a>七、常用命令总结</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span>   <span class="comment"># 创建新文章</span></span><br><span class="line">hexo new page <span class="string">&quot;页面名&quot;</span> <span class="comment"># 创建新页面</span></span><br><span class="line">hexo clean            <span class="comment"># 清除缓存</span></span><br><span class="line">hexo generate (hexo g) <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo server (hexo s)   <span class="comment"># 启动本地服务器</span></span><br><span class="line">hexo deploy (hexo d)   <span class="comment"># 部署博客</span></span><br></pre></td></tr></table></figure>
<h3 id="八、个性化定制"><a class="header-anchor" href="#八、个性化定制">¶</a>八、个性化定制</h3>
<ol>
<li>可以在 <code>_config.next.yml</code> 中修改主题颜色、字体、动画等</li>
<li>安装第三方插件扩展功能（如评论系统、阅读统计等）</li>
<li>自定义 CSS 样式，放在 <code>source/css/_custom/custom.styl</code> 中</li>
</ol>
<p>按照以上步骤，你就可以搭建一个功能完善的 Hexo + Next 博客了。如果需要更深入的定制，可以参考 <a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a> 和 <a href="https://theme-next.js.org/">Next 主题文档</a>。</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>go项目发送接口设计流程</title>
    <url>/2025/08/29/go%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="Go发送接口设计的整体结构"><a class="header-anchor" href="#Go发送接口设计的整体结构">¶</a>Go发送接口设计的整体结构</h3>
<img src="/img/屏幕截图 2025-08-29 104725.png" alt="678" />
<h3 id="service层实现"><a class="header-anchor" href="#service层实现">¶</a>service层实现</h3>
<p>分为以下三个部分</p>
<ul>
<li>
<p>接口的定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> (</span><br><span class="line">	IDatasync <span class="keyword">interface</span> &#123;<span class="comment">//定义一个interface（接口类型）的IDatasync</span></span><br><span class="line">		Func1(ctx context.Context) (err <span class="type">error</span>)<span class="comment">//前面的括号是入参，后面的括号是出参</span></span><br><span class="line">		Func2(ctx context.Context) (err <span class="type">error</span>)</span><br><span class="line">		Func3(ctx context.Context) (err <span class="type">error</span>)</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//只定义抽象的接口名称，接口入参出参类型</span></span><br><span class="line"><span class="comment">//数据实现层的接口的数量，名称，入参出参都要和这一致</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>全局变量以及单例模式的定义实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	localDatasync IDatasync<span class="comment">//定义全局变量</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Datasync</span><span class="params">()</span></span> IDatasync &#123;<span class="comment">//全局访问点，当系统其他地方需要调用接口方法是通过这个方法.Func1(ctx 		     context.Context)</span></span><br><span class="line">	<span class="keyword">if</span> localDatasync == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;implement not found for interface IDatasync, forgot register?&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> localDatasync</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注册具体方法实现</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterDatasync</span><span class="params">(i IDatasync)</span></span> &#123;</span><br><span class="line">	localDatasync = i</span><br><span class="line">&#125;<span class="comment">//将逻辑实现层中的方法具体实现注册进来</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="逻辑实现层的具体实现"><a class="header-anchor" href="#逻辑实现层的具体实现">¶</a>逻辑实现层的具体实现</h3>
<h4 id="接口实现的注册"><a class="header-anchor" href="#接口实现的注册">¶</a>接口实现的注册</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> sDatasync <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="comment">// sDatasyncNew 函数用于创建并返回一个 *sDatasync 类型的实例。</span></span><br><span class="line"><span class="comment">// 从代码中的 init 函数可以看出，该函数创建的实例会被传递给 service.RegisterDatasync 方法，</span></span><br><span class="line"><span class="comment">// 这表明 sDatasync 结构体实现了 service.IDatasync 接口，</span></span><br><span class="line"><span class="comment">// 此函数创建的实例会被注册到 service 模块中，供后续使用。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sDatasyncNew</span><span class="params">()</span></span> *sDatasync &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;sDatasync&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此方法是将 sDatasync 实例注册到 service 模块中</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	service.RegisterDatasync(sDatasyncNew())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><mark>注意</mark>由于GO语言是包级作用域，因此如果接口过多，要分成多分文件去写，那么在同一包下的其他文件不用实现上面的注册，直接进行接口实现就行</p>
<h4 id="接口的实现"><a class="header-anchor" href="#接口的实现">¶</a>接口的实现</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Go 语言里，`func` 后面的 `(s *sDatasync)` 被称作方法接收器（Method Receiver），</span></span><br><span class="line"><span class="comment">// 它表明这个函数是 `sDatasync` 结构体的一个方法。</span></span><br><span class="line"><span class="comment">// `*sDatasync` 表示使用指针接收器，意味着该方法可以修改 `sDatasync` 结构体实例的内容，</span></span><br><span class="line"><span class="comment">// 同时避免在调用方法时复制结构体实例，提高性能。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sDatasync)</span></span> Func1(ctx context.Context) (err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">//获取所有用户信息</span></span><br><span class="line">	userInfoOut, err := proxy.GetUserAll(ctx)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> userProfileInfos []*model.UserProfileInfo</span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> userInfoOut &#123;</span><br><span class="line">		<span class="comment">//数据格式的转换</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 使用 json.Marshal 将 userProfiles 转换为 JSON 字符串</span></span><br><span class="line">	jsonData, err := json.Marshal(model.CustDataRequest&#123;</span><br><span class="line">		CustDataVo: userProfileInfos,</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Error converting to JSON:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//对参数进行ASE进行加密</span></span><br><span class="line">    aesCrypto, err := utils.数据加密()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		g.Log().Errorf(context.Background(), <span class="string">&quot;创建默认AES加解密工具失败: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	encryptedText, err := aesCrypto.Encrypt(<span class="type">string</span>(jsonData))</span><br><span class="line">	outData, err := utils.发送数据(ctx, aesCrypto, consts.UploadUserList, encryptedText)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;<span class="comment">//这里传入的aesCrypto作为解密工具，负责将目标服务器发送的响应解密</span></span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 发送到目标地址，使用明文数据</span></span><br><span class="line">	<span class="comment">// outData, err := utils.DoPost(ctx, nil, consts.UploadUserList, encryptedText)</span></span><br><span class="line">	<span class="comment">// if err != nil &#123;</span></span><br><span class="line">	<span class="comment">// 	return err</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">	g.Log().Debugf(ctx, <span class="string">&quot;返回结果:%v&quot;</span>, outData)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中提到的utils包主要作用是实现一些非获取数据的其他功能，如加解密数据，数据发送等</p>
<h4 id="目标服务器地址以及请求api的定义"><a class="header-anchor" href="#目标服务器地址以及请求api的定义">¶</a>目标服务器地址以及请求api的定义</h4>
<p>通过const定义相关常量</p>
<h6 id=""><a class="header-anchor" href="#">¶</a></h6>
]]></content>
      <categories>
        <category>go</category>
        <category>接口设计</category>
      </categories>
      <tags>
        <tag>go</tag>
        <tag>接口设计</tag>
      </tags>
  </entry>
  <entry>
    <title>博客系统的登录页面详解</title>
    <url>/2025/09/01/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>sagooiot插件的定时任务实现</title>
    <url>/2025/08/31/sagooiot%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="为什么需要定时任务"><a class="header-anchor" href="#为什么需要定时任务">¶</a>为什么需要定时任务</h3>
<p>​	以电网接口为例，系统需要向目标接口发送数据，对方要求数据需要定时上报，这是就需要后端执行定时任务，每到定时任务时间自动执行发送数据任务；还有的情况是，系统需要定时向某第三方api请求数据，或者需要定时执行系统上的功能。</p>
<h3 id="在插件中的定时任务的实现"><a class="header-anchor" href="#在插件中的定时任务的实现">¶</a>在插件中的定时任务的实现</h3>
<p>首先定时任务整个流程如下：<br>
<img src="/img/task-work.png"></p>
<p>task层中的具体工作流程：<br>
<img src="/img/task.go.png"></p>
<h4 id="定时任务执行的文件代码："><a class="header-anchor" href="#定时任务执行的文件代码：">¶</a>定时任务执行的文件代码：</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> task</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gogf/gf/v2/frame/g&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gogf/gf/v2/util/gconv&quot;</span></span><br><span class="line">	<span class="string">&quot;huadian-dcsc/module/dcscpush/service&quot;</span></span><br><span class="line">	<span class="string">&quot;sagooiot/pkg/worker&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ScheduledSyncUserList 是一个指向 worker.Scheduled 类型的指针，用于表示用户列表同步的定时任务。</span></span><br><span class="line"><span class="comment">// 初始时创建一个新的 worker.Scheduled 实例。</span></span><br><span class="line"><span class="keyword">var</span> ScheduledSyncUserList = <span class="built_in">new</span>(worker.Scheduled)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ScheduledSyncUserListRun 函数用于注册用户列表同步任务。</span></span><br><span class="line"><span class="comment">// 调用 worker.RegisterProcess 方法将 SyncUserList 注册到任务处理中，</span></span><br><span class="line"><span class="comment">// 并将返回的定时任务实例赋值给 ScheduledSyncUserList。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScheduledSyncUserListRun</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ScheduledSyncUserList = worker.RegisterProcess(SyncUserList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SyncUserList 同步用户列表，是一个指向 qSyncUserList 类型的指针，代表用户列表同步任务。</span></span><br><span class="line"><span class="keyword">var</span> SyncUserList = &amp;qSyncUserList&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// qSyncUserList 结构体实现了任务处理所需的方法，用于处理用户列表同步任务。</span></span><br><span class="line"><span class="comment">// 嵌入 worker.BaseProcess 结构体，继承其基础功能。</span></span><br><span class="line"><span class="keyword">type</span> qSyncUserList <span class="keyword">struct</span> &#123;</span><br><span class="line">	worker.BaseProcess</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GetTopic 主题</span></span><br><span class="line"><span class="comment">// GetTopic 方法用于获取同步用户列表任务的主题，该主题（TaskSyncUserList）用于标识此同步用户列表任务，</span></span><br><span class="line"><span class="comment">// 在消息队列或任务调度等场景中，可通过该主题来识别并处理该任务。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *qSyncUserList)</span></span> GetTopic() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> TaskSyncUserList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handle 处理消息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *qSyncUserList)</span></span> Handle(ctx context.Context, mqMsg worker.Payload) (err <span class="type">error</span>) &#123;</span><br><span class="line">	newCtx := context.Background()</span><br><span class="line">	workerName := gconv.String(mqMsg.Payload)</span><br><span class="line">	g.Log().Info(newCtx, workerName, <span class="string">&quot; Start TaskSyncUserList&quot;</span>)</span><br><span class="line">	err = service.Datasync().SyncSysUser(ctx)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="task-go的代码："><a class="header-anchor" href="#task-go的代码：">¶</a>task.go的代码：</h4>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> task</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	_ <span class="string">&quot;huadian-dcsc/module/dcscpush/logic/datasync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="comment">//启动定时任务处理服务</span></span><br><span class="line">	ScheduledSyncUserListRun()</span><br><span class="line"></span><br><span class="line">	err = ScheduledSyncUserList.Cron(context.Background(), TaskSyncUserList, <span class="string">&quot;0 0 2 * * ?&quot;</span>, []<span class="type">byte</span>(<span class="string">&quot;ctwing&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="sagooiot中work包的定时任务处理"><a class="header-anchor" href="#sagooiot中work包的定时任务处理">¶</a>sagooiot中work包的定时任务处理</h3>
<h1>work_proces.go 中 Cron 表达式定时执行任务的实现机制</h1>
<h2 id="整体架构概述"><a class="header-anchor" href="#整体架构概述">¶</a>整体架构概述</h2>
<p>在 sagooiot-professional 项目中，<code>work_proces.go</code> 文件通过与 <code>worker.go</code> 配合，实现了一套基于 Cron 表达式的定时任务调度系统。该系统采用了分布式设计，使用 Redis 作为存储媒介，并结合了工作池、信号量等机制确保任务执行的高效性和稳定性。</p>
<h2 id="Cron-表达式定时任务的核心实现流程"><a class="header-anchor" href="#Cron-表达式定时任务的核心实现流程">¶</a>Cron 表达式定时任务的核心实现流程</h2>
<h3 id="1-任务注册机制"><a class="header-anchor" href="#1-任务注册机制">¶</a>1. 任务注册机制</h3>
<p><code>Scheduled</code> 结构体的 <code>Cron</code> 方法是用户注册定时任务的入口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cron 采用定时任务的方式执行任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scheduled)</span></span> Cron(ctx context.Context, topic, cronExpr <span class="type">string</span>, data []<span class="type">byte</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line">    s.topic = topic</span><br><span class="line">    err = s.w.Cron(</span><br><span class="line">        WithRunUuid(topic),</span><br><span class="line">        WithRunGroup(topic),</span><br><span class="line">        WithRunExpr(cronExpr), <span class="comment">// 设置 Cron 表达式</span></span><br><span class="line">        WithRunPayload(data), <span class="comment">// 传递参数</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        g.Log().Debug(ctx, <span class="string">&quot;Run Cron TaskWorker %s Error: %v&quot;</span>, topic, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>WithRunExpr(cronExpr)</code> 是关键参数，用于传递 Cron 表达式，它是一个函数选项模式的实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WithRunExpr Cron表达式, 最小单位1分钟, 参见gorhill/cronexpr</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithRunExpr</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(*RunOptions)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(options *RunOptions)</span></span> &#123;</span><br><span class="line">        getRunOptionsOrSetDefault(options).expr = s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Worker-中的-Cron-任务处理"><a class="header-anchor" href="#2-Worker-中的-Cron-任务处理">¶</a>2. Worker 中的 Cron 任务处理</h3>
<p><code>Worker</code> 结构体的 <code>Cron</code> 方法是定时任务的核心实现，它完成以下工作：</p>
<ol>
<li><strong>参数校验</strong>：验证 Worker 是否已初始化、Cron 表达式是否为空、任务负载是否过大</li>
<li><strong>计算下一次执行时间</strong>：通过 <code>getNext</code> 函数解析 Cron 表达式并计算下次执行时间</li>
<li><strong>任务创建与存储</strong>：创建 <code>periodTask</code> 对象并存储到 Redis 中</li>
<li><strong>任务更新处理</strong>：检查并处理已有任务的表达式变更情况</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Cron 设置周期性任务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wk *Worker)</span></span> Cron(options ...<span class="keyword">func</span>(*RunOptions)) (err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查Worker是否初始化</span></span><br><span class="line">    <span class="keyword">if</span> wk == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;工作器未初始化&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析选项</span></span><br><span class="line">    ops := getRunOptionsOrSetDefault(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">for</span> _, f := <span class="keyword">range</span> options &#123;</span><br><span class="line">        f(ops)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span> ops.uid == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.Unwrap(ErrUuidNil)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ops.expr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;Cron表达式不能为空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算下一次执行时间</span></span><br><span class="line">    <span class="keyword">var</span> next <span class="type">int64</span></span><br><span class="line">    now := time.Now().Unix()</span><br><span class="line">    next, err = getNext(ops.expr, now)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        alog.M(alog.WorkerModule).Errorf(context.Background(), <span class="string">&quot;Cron表达式 &#x27;%s&#x27; 无效: %v&quot;</span>, ops.expr, err)</span><br><span class="line">        <span class="keyword">return</span> errors.Unwrap(ErrExprInvalid)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建周期任务</span></span><br><span class="line">    t := periodTask&#123;</span><br><span class="line">        Expr:     ops.expr,</span><br><span class="line">        Group:    strings.Join([]<span class="type">string</span>&#123;ops.group, <span class="string">&quot;cron&quot;</span>&#125;, <span class="string">&quot;.&quot;</span>),</span><br><span class="line">        Uid:      ops.uid,</span><br><span class="line">        Payload:  ops.payload,</span><br><span class="line">        Next:     next,</span><br><span class="line">        MaxRetry: ops.maxRetry,</span><br><span class="line">        Timeout:  ops.timeout,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存任务到Redis</span></span><br><span class="line">    _, err = wk.redis.HSet(ctx, wk.ops.redisPeriodKey, ops.uid, t.String()).Result()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-Cron-表达式解析与执行时间计算"><a class="header-anchor" href="#3-Cron-表达式解析与执行时间计算">¶</a>3. Cron 表达式解析与执行时间计算</h3>
<p><code>getNext</code> 函数负责解析 Cron 表达式并计算下一次执行时间：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getNext 计算下一次执行时间</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNext</span><span class="params">(expr <span class="type">string</span>, timestamp <span class="type">int64</span>)</span></span> (next <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    t := time.Unix(timestamp, <span class="number">0</span>)</span><br><span class="line">    specParser := cron.NewParser(cron.Second | cron.Minute | cron.Hour | cron.Dom | cron.Month | cron.Dow | cron.Descriptor)</span><br><span class="line">    sched, err := specParser.Parse(expr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    next = sched.Next(t).Unix()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数使用了 Go 的 <code>cron</code> 包，支持秒、分、时、日、月、星期和描述符等多种时间单位的表达式解析。</p>
<h3 id="4-定时任务的扫描与执行"><a class="header-anchor" href="#4-定时任务的扫描与执行">¶</a>4. 定时任务的扫描与执行</h3>
<p>系统通过 <code>Worker</code> 的 <code>scan</code> 方法定期扫描并处理到期的定时任务：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// scan 扫描并处理任务队列 - 优化版本</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wk *Worker)</span></span> scan() &#123;</span><br><span class="line">    <span class="comment">// 创建带超时的上下文</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取分布式锁</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从Redis获取所有任务</span></span><br><span class="line">    m, err := wk.redis.HGetAll(fetchCtx, wk.ops.redisPeriodKey).Result()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    now := time.Now().Unix()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找出需要执行的任务</span></span><br><span class="line">    tasksToExecute := <span class="built_in">make</span>([]*periodTask, <span class="number">0</span>, min(<span class="built_in">len</span>(m), <span class="number">100</span>))</span><br><span class="line">    <span class="keyword">for</span> uid, taskData := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> now &gt;= item.Next &#123;</span><br><span class="line">            taskCopy := item</span><br><span class="line">            tasksToExecute = <span class="built_in">append</span>(tasksToExecute, &amp;taskCopy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量执行任务</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tasksToExecute) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        wk.executeTasks(ctx, tasksToExecute, now)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-任务执行与更新"><a class="header-anchor" href="#5-任务执行与更新">¶</a>5. 任务执行与更新</h3>
<p><code>executeTasks</code> 方法采用工作池模式并发执行任务，并在执行完成后计算和更新下一次执行时间：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// executeTasks 批量执行任务，提高性能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wk *Worker)</span></span> executeTasks(ctx context.Context, tasks []*periodTask, now <span class="type">int64</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用工作池模式，限制并发执行的任务数量</span></span><br><span class="line">    maxConcurrent := min(<span class="built_in">len</span>(tasks), <span class="number">10</span>) <span class="comment">// 最多同时执行10个任务</span></span><br><span class="line">    semaphore := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, maxConcurrent)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动任务执行协程</span></span><br><span class="line">    <span class="keyword">for</span> _, task := <span class="keyword">range</span> tasks &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t *periodTask)</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> wg.Done()</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            <span class="keyword">if</span> err := wk.executeTaskSafe(execCtx, t); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                alog.M(alog.WorkerModule).Debugf(ctx, <span class="string">&quot;执行任务 %s 失败: %v&quot;</span>, t.Uid, err)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算下一次执行时间</span></span><br><span class="line">            next, err := getNext(t.Expr, now)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                alog.M(alog.WorkerModule).Debugf(ctx, <span class="string">&quot;计算任务 %s 下一次执行时间失败: %v&quot;</span>, t.Uid, err)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新任务的下一次执行时间</span></span><br><span class="line">            t.Next = next</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;(task)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量更新任务到Redis</span></span><br><span class="line">    wk.batchUpdateTasks(ctx, updateTasks, <span class="built_in">len</span>(tasks))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关键技术特点"><a class="header-anchor" href="#关键技术特点">¶</a>关键技术特点</h2>
<ol>
<li><strong>分布式设计</strong>：使用 Redis 存储任务信息，支持多实例部署</li>
<li><strong>分布式锁</strong>：使用 <code>nx.Nx</code> 实现分布式锁，确保任务不会被重复执行</li>
<li><strong>工作池模式</strong>：限制并发任务数，防止系统资源耗尽</li>
<li><strong>错误处理与恢复</strong>：多处使用 <code>defer recover()</code> 机制，提高系统稳定性</li>
<li><strong>超时控制</strong>：对各个环节都设置了合理的超时时间，避免任务阻塞</li>
<li><strong>原子操作</strong>：使用原子操作处理计数器等共享资源，确保线程安全</li>
<li><strong>自适应调整</strong>：根据锁获取失败次数动态调整扫描间隔</li>
</ol>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p><code>sagooiot-professional</code> 项目中的 <code>work_proces.go</code> 通过与 <code>worker.go</code> 配合，实现了一套完整的基于 Cron 表达式的定时任务调度系统。该系统采用了分布式设计，结合了工作池模式、分布式锁、错误恢复等多种技术手段，确保了定时任务的高可靠性和高可用性。</p>
<p>整个流程可以概括为：用户通过 <code>Scheduled.Cron</code> 方法注册定时任务 → 系统将任务存储到 Redis 中 → <code>Worker.scan</code> 方法定期扫描到期任务 → 系统并发执行任务并更新下一次执行时间，从而实现了基于 Cron 表达式的定时任务调度功能。</p>
]]></content>
      <categories>
        <category>sagooiot</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>sagooiot</tag>
        <tag>插件</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
</search>
